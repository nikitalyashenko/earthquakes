type Query {
  getEarthquake(id: Int!): Earthquake!
  getPaginatedEarthquakes(page: Int = 1, limit: Int = 10): PaginatedEarthquakeOutput!
}

type Earthquake {
  id: Int!
  dateTime: DateTimeISO!
  latitude: Float!
  longitude: Float!
  depth: Float!
  magnitude: Float!
  magType: EarthquakeMagType!
  nbStations: Int!
  gap: Int
  distance: Float
  rms: Float
  source: EarthquakeSource!
  eventId: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

"""The type of magnitude"""
enum EarthquakeMagType {
  ML
  Mb
  Ms
}

"""The source of earthquake data"""
enum EarthquakeSource {
  NEI
  AK
}

type PaginatedEarthquakeOutput {
  items: [Earthquake!]!
  meta: PaginationMeta!
}

type PaginationMeta {
  """the amount of items on this specific page"""
  itemCount: Float!

  """the total amount of items"""
  totalItems: Float

  """the amount of items that were requested per page"""
  itemsPerPage: Float!

  """the total amount of pages in this paginator"""
  totalPages: Float

  """the current page this paginator "points" to"""
  currentPage: Float!
}

type Mutation {
  createEarthquake(dateTime: DateTimeISO!, latitude: Float!, longitude: Float!, depth: Float!, magnitude: Float!, magType: EarthquakeMagType!, nbStations: Int!, gap: Int, distance: Float, rms: Float, source: EarthquakeSource!, eventId: String): Earthquake!
  updateEarthquake(id: Int!, dateTime: DateTimeISO, latitude: Float, longitude: Float, depth: Float, magnitude: Float, magType: EarthquakeMagType, nbStations: Int, gap: Int, distance: Float, rms: Float, source: EarthquakeSource, eventId: String): Earthquake!
  deleteEarthquake(id: Int!): Boolean!
}